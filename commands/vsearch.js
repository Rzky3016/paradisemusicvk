import { audioSearch } from "../vkApi"
import addToQueue from "../tools/addToQueue"
import { Duration } from "luxon"

export default {
  name: "vsearch",
  description: "–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –í–ö –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
  cooldown: 15,
  execute: async function (message, args, options) {
    const query = args.join(" ").trim()
    if (query.length < 3) return message.reply("—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å.")

    const res = await audioSearch(query, options.captcha, options.http)

    if (res.status == "error") {
      if (res.type == "empty") return message.reply("–ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
  
      if (res.type == "captcha") {
        options.captchas.set(message.member.id, {
          type: "vsearch",
          args: args,
          url: res.data.captcha_img,
          sid: res.data.captcha_sid
        })
        const captcha = options.captchas.get(message.member.id)
        return message.reply(`–ø—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –≤—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ –∫–∞–ø—á—É! –í–≤–µ–¥–∏—Ç–µ \`-vcaptcha <—Ç–µ–∫—Å—Ç_—Å_–∫–∞—Ä—Ç–∏–Ω–∫–∏>\`. ${captcha.url}`)
      }

      return message.reply("–æ—à–∏–±–∫–∞.")
    }

    let description = ""

    res.result.map((value, index) => {
      description += `${index + 1}. ${value.artist} ‚Äî ${value.title}\n`
    })

    description += "\n:arrow_down_small: **–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–∫, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä –Ω–∏–∂–µ** :arrow_down_small:"

    const embed = {
      color: 0x5181b8,
      title: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞",
      description
    }

    const filter = response => {
      return parseInt(response.content) <= res.result.length
    }

    message.channel.send({embed: embed}).then(msg => {
      message.channel.awaitMessages(filter, { max: 1, time: 30000, errors: ['time'] })
      .then(collected => {
        msg.delete()
        const voiceChannel = message.member.voice.channel
        if (!voiceChannel) return message.reply('–≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É.')
  
        const permissions = voiceChannel.permissionsFor(message.client.user)
        if (!permissions.has('CONNECT') || !permissions.has('SPEAK') || !permissions.has('VIEW_CHANNEL')) {
          return message.reply('–º–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å –º—É–∑—ã–∫—É!')
        }
    
        if (voiceChannel.full) return message.reply("–≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –ø–æ–ª–æ–Ω!")

        const song = res.result[parseInt(collected.first().content) - 1]

        addToQueue(options, message, voiceChannel, [song])

        const songEmbed = {
          color: 0x5181b8,
          title: song.title,
          author: {
            name: "–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!"
          },
          description: song.artist,
          fields: [
            {
              name: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
              value: Duration.fromObject({seconds: song.duration}).toFormat("mm:ss")
            },
          ]
        }

        message.channel.send({embed: songEmbed})

        const textPermissions = message.channel.permissionsFor(message.client.user)
        if (textPermissions.has("ADD_REACTIONS"))
        collected.first().react("üëå")
      })
      .catch(() => {
        msg.delete()
      })
    })
  }
}